        -:    0:Source:C:/Users/IscG/Documents/Programming/epq/src/ipd.cpp
        -:    0:Graph:C:\Users\IscG\Documents\Programming\epq\cmake-build-release-coverage\CMakeFiles\epq.dir\src\ipd.cpp.gcno
        -:    0:Data:C:\Users\IscG\Documents\Programming\epq\cmake-build-release-coverage\CMakeFiles\epq.dir\src\ipd.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "ipd.h"
        -:    2:#define ALPHA 5.0
        -:    3:#define BETA 1.0
        -:    4:#define GAMMA -1.0
        -:    5:#define DELTA -5.0
        -:    6://#define DEBUGQ
        -:    7://#define DEBUGR
        -:    8:namespace IPD {
        -:    9:
        -:   10:std::map<float, int> rewardToState {
        -:   11:        {ALPHA, 0},
        -:   12:        {BETA, 1},
        -:   13:        {GAMMA, 2},
        -:   14:        {DELTA, 3}
        -:   15:};
        -:   16:
function _ZN3IPD5AgentC2Ev called 0 returned 0% blocks executed 0%
     200*:   17:Agent::Agent() = default;
function _ZN3IPD5AgentC2Ei called 0 returned 0% blocks executed 0%
    #####:   18:Agent::Agent(int initialAction) : action(initialAction) {}
function _ZN3IPD5AgentD2Ev called 0 returned 0% blocks executed 0%
    #####:   19:Agent::~Agent() = default;
function _ZN3IPD5Agent6updateEf called 0 returned 0% blocks executed 0%
    #####:   20:void Agent::update(float feedback) {}
function _ZNK3IPD5Agent9getActionEv called 0 returned 0% blocks executed 0%
    #####:   21:int Agent::getAction() const {
 2000000*:   22:    return action;
    %%%%%:   22-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   22-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:   22-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:   22-block  3
branch  6 never executed
branch  7 never executed
  2000000:   22-block  4
branch  8 taken 990642 (fallthrough)
branch  9 taken 1009358
        -:   23:}
        -:   24:
function _ZN3IPD6RAgentC2Ev called 0 returned 0% blocks executed 0%
    #####:   25:RAgent::RAgent() = default;
    %%%%%:   25-block  0
function _ZN3IPD6RAgentC2Efffii called 0 returned 0% blocks executed 0%
    #####:   26:RAgent::RAgent(const float a, const float b, const float e, int ia, int is)
    #####:   27:        : Agent(ia), alpha(a), beta(b), epsilon(e), state(is) {
    #####:   28:    for (auto& rValue : rValues) {
    %%%%%:   28-block  0
    %%%%%:   28-block  1
branch  0 never executed
branch  1 never executed
    %%%%%:   28-block  2
    %%%%%:   28-block  3
branch  2 never executed
branch  3 never executed
    #####:   29:        rValue[0] = 0, rValue[1] = 0;
    %%%%%:   29-block  0
    %%%%%:   29-block  1
        -:   30:    }
    #####:   31:}
        -:   32:
function _ZN3IPD6RAgentD2Ev called 0 returned 0% blocks executed 0%
    #####:   33:RAgent::~RAgent() = default;
function _ZN3IPD6RAgent6updateEf called 0 returned 0% blocks executed 0%
    #####:   34:void RAgent::update(float feedback) {
        -:   35:    int sDash;
        -:   36:    float u, uDash;
    #####:   37:    sDash = rewardToState[feedback];
    %%%%%:   37-block  0
call    0 never executed
        -:   38:    // The maximum expected average-adjusted value of the next state
    #####:   39:    uDash = rValues[sDash][0] > rValues[sDash][1] ? rValues[sDash][0] : rValues[sDash][1];
branch  0 never executed
branch  1 never executed
        -:   40:    // R(s,a) <- r-rho+u'
    #####:   41:    rValues[state][action] = (1-alpha)*rValues[state][action]+alpha*(feedback-rho+uDash);
        -:   42:    // rho <- r+u'-u
        -:   43:    // u'-u is the value of the current state relative to the previous state - if it is low then r increases
    #####:   44:    uDash = rValues[sDash][0] > rValues[sDash][1] ? rValues[sDash][0] : rValues[sDash][1];
    %%%%%:   44-block  0
branch  0 never executed
branch  1 never executed
    #####:   45:    u = rValues[state][0] > rValues[state][1] ? rValues[state][0] : rValues[state][1];
    %%%%%:   45-block  0
branch  0 never executed
branch  1 never executed
        -:   46:    // If the current strategy is optimal, update rho
    #####:   47:    if (rValues[state][action] >= rValues[state][!action])
    %%%%%:   47-block  0
branch  0 never executed
branch  1 never executed
    #####:   48:        rho = (1-beta)*rho+beta*(feedback+uDash-u);
    %%%%%:   48-block  0
    #####:   49:    state = sDash;
        -:   50:
    #####:   51:    if (rValues[state][0] == rValues[state][1] || randreal() > epsilon)
    %%%%%:   51-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   51-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:   52:        action = randinteger(2);
    %%%%%:   52-block  0
call    0 never executed
        -:   53:    else
    #####:   54:        action = rValues[state][0] > rValues[state][1] ? 0 : 1;
    %%%%%:   54-block  0
    #####:   55:}
        -:   56:
function _ZN3IPD6RAgent7displayEv called 0 returned 0% blocks executed 0%
    #####:   57:void RAgent::display() {
    %%%%%:   57-block  0
call    0 never executed
    #####:   58:    std::cout << "Rho: " << rho << std::endl;
call    0 never executed
    #####:   59:    std::cout << "Current state: ";
call    0 never executed
    #####:   60:    switch (state) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:   61:        case 0:
        -:   62:            std::cout << "0 (DC)" << std::endl;
        -:   63:            break;
        -:   64:        case 1:
        -:   65:            std::cout << "1 (CC)" << std::endl;
        -:   66:            break;
        -:   67:        case 2:
        -:   68:            std::cout << "2 (DD)" << std::endl;
        -:   69:            break;
        -:   70:        case 3:
        -:   71:            std::cout << "3 (CD)" << std::endl;
        -:   72:            break;
        -:   73:    }
    #####:   74:    for (int i = 0; i < 4; i++) {
    %%%%%:   74-block  0
branch  0 never executed
branch  1 never executed
    #####:   75:        std::cout << "R(" << i << ", 0) = " << rValues[i][0] << ", R(" << i << ", 1) = " << rValues[i][1] << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   76:    }
    #####:   77:    std::cout << "Next strategy: ";
    %%%%%:   77-block  0
call    0 never executed
    #####:   78:    if (action == 0)
branch  0 never executed
branch  1 never executed
        -:   79:        std::cout << "cooperation" << std::endl;
        -:   80:    else
        -:   81:        std::cout << "defection" << std::endl;
    #####:   82:}
        -:   83:
        -:   84:// Minimised RAgent - Standard for IPD
function _ZN3IPD7MRAgentC2Ev called 0 returned 0% blocks executed 0%
     200*:   85:MRAgent::MRAgent() = default;
      200:   85-block  0
function _ZN3IPD7MRAgentD2Ev called 0 returned 0% blocks executed 0%
    #####:   86:MRAgent::~MRAgent() = default;
function _ZN3IPD7MRAgentC2Efffi called 0 returned 0% blocks executed 0%
     200*:   87:MRAgent::MRAgent(float a, float b, float e, int ia)
     200*:   88:    : Agent(ia), alpha(a), beta(b), epsilon(e) {
        -:   89:    rValues[0] = 0;
        -:   90:    rValues[1] = 0;
    #####:   91:}
function _ZN3IPD7MRAgent6updateEf called 1757188 returned 100% blocks executed 100%
  1757188:   92:void MRAgent::update(float feedback) {
  1757188:   93:    float uDash = rValues[0] > rValues[1] ? rValues[0] : rValues[1];
  1757188:   93-block  0
branch  0 taken 1588279 (fallthrough)
branch  1 taken 168909
  1757188:   94:    rValues[action] = (1-alpha)*rValues[action]+alpha*(feedback-rho+uDash);
  1757188:   95:    if (rValues[action] > rValues[!action])
  1757188:   95-block  0
branch  0 taken 771812 (fallthrough)
branch  1 taken 985376
   771812:   96:        rho = (1-beta)*rho+beta*feedback;
   771812:   96-block  0
        -:   97:
        -:   98:    // Action update
  1757188:   99:    if (rValues[0] == rValues[1] || randreal() > epsilon)
  1757188:   99-block  0
branch  0 taken 1757180 (fallthrough)
branch  1 taken 8
  1757180:   99-block  1
call    2 returned 1757180
branch  3 taken 1739483 (fallthrough)
branch  4 taken 17697
  1739491:  100:        action = randinteger(2);
  1739491:  100-block  0
call    0 returned 1739491
        -:  101:    else
    17697:  102:        action = rValues[0] > rValues[1] ? 0 : 1;
    17697:  102-block  0
  1757188:  103:}
        -:  104:
        -:  105:// QAgent
function _ZN3IPD6QAgentC2Ev called 0 returned 0% blocks executed 0%
    #####:  106:QAgent::QAgent() = default;
    %%%%%:  106-block  0
function _ZN3IPD6QAgentC2Efffii called 0 returned 0% blocks executed 0%
    #####:  107:QAgent::QAgent(float a, float g, float e, int ia, int is)
    #####:  108:        : Agent(ia), alpha(a), gamma(g), epsilon(e), state(is) {
    #####:  109:    for (auto & qValue : qValues) {
    %%%%%:  109-block  0
    %%%%%:  109-block  1
branch  0 never executed
branch  1 never executed
    %%%%%:  109-block  2
    %%%%%:  109-block  3
branch  2 never executed
branch  3 never executed
    #####:  110:        qValue[0] = 0, qValue[1] = 0;
    %%%%%:  110-block  0
    %%%%%:  110-block  1
        -:  111:    }
    #####:  112:}
function _ZN3IPD6QAgentD2Ev called 0 returned 0% blocks executed 0%
    #####:  113:QAgent::~QAgent() = default;
        -:  114:
function _ZN3IPD6QAgent6updateEf called 0 returned 0% blocks executed 0%
    #####:  115:void QAgent::update(float feedback) {
    #####:  116:    int sDash = rewardToState[feedback];
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:    float maxValue = qValues[sDash][0] > qValues[sDash][1] ? qValues[sDash][0] : qValues[sDash][1];
branch  0 never executed
branch  1 never executed
    #####:  118:    qValues[state][action] = (1-alpha)*qValues[state][action]+alpha*(feedback+gamma*maxValue);
    #####:  119:    state = sDash;
        -:  120:
    #####:  121:    if (qValues[state][1] == qValues[state][0] || randreal() > epsilon)
    %%%%%:  121-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  121-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  122:        action = randinteger(2);
    %%%%%:  122-block  0
call    0 never executed
        -:  123:    else
    #####:  124:        action = qValues[state][0] > qValues[state][1] ? 0 : 1;
    %%%%%:  124-block  0
        -:  125:
        -:  126:    // #ifdef DEBUG
        -:  127:    // if ((float)rand()/(float)RAND_MAX < 0.00000000001) {
        -:  128:    //     for (int i = 0; i < 4; i++)
        -:  129:    //         std::cout << "Q(" << i << ", 0) = " << qValues[i][0] << ", Q(" << i << ", 1) = " << qValues[i][1] << std::endl;
        -:  130:    // }
        -:  131:    // #endif
    #####:  132:}
        -:  133:
function _ZN3IPD6QAgent7displayEv called 0 returned 0% blocks executed 0%
    #####:  134:void QAgent::display() {
    #####:  135:    std::cout << "Current state: ";
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:    switch (action) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  137:        case 0:
        -:  138:            std::cout << "0 (DC)" << std::endl;
        -:  139:            break;
        -:  140:        case 1:
        -:  141:            std::cout << "1 (CC)" << std::endl;
        -:  142:            break;
        -:  143:        case 2:
        -:  144:            std::cout << "2 (DD)" << std::endl;
        -:  145:            break;
        -:  146:        case 3:
        -:  147:            std::cout << "3 (CD)" << std::endl;
        -:  148:            break;
        -:  149:    }
    #####:  150:    for (int i = 0; i < 4; i++) {
    %%%%%:  150-block  0
branch  0 never executed
branch  1 never executed
    #####:  151:        std::cout << "Q(" << i << ", 0) = " << qValues[i][0] << ", Q(" << i << ", 1) = " << qValues[i][1] << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  152:    }
    #####:  153:    std::cout << "Next strategy: ";
    %%%%%:  153-block  0
call    0 never executed
    #####:  154:    if (action == 0)
branch  0 never executed
branch  1 never executed
        -:  155:        std::cout << "cooperation" << std::endl;
        -:  156:    else
        -:  157:        std::cout << "defection" << std::endl;
    #####:  158:}
        -:  159:
        -:  160:// Minimised Q Agent - Standard for IPD
function _ZN3IPD7MQAgentC2Ev called 0 returned 0% blocks executed 0%
    #####:  161:MQAgent::MQAgent() = default;
    %%%%%:  161-block  0
function _ZN3IPD7MQAgentD2Ev called 0 returned 0% blocks executed 0%
    #####:  162:MQAgent::~MQAgent() = default;
function _ZN3IPD7MQAgentC2Efffi called 0 returned 0% blocks executed 0%
    #####:  163:MQAgent::MQAgent(float a, float g, float e, int ia)
    #####:  164:    : Agent(ia), alpha(a), gamma(g), epsilon(e) {
        -:  165:    qValues[0] = 0;
        -:  166:    qValues[1] = 0;
    #####:  167:}
function _ZN3IPD7MQAgent6updateEf called 0 returned 0% blocks executed 0%
    #####:  168:void MQAgent::update(float feedback) {
        -:  169:    // Training update
    #####:  170:    float uDash = qValues[0] > qValues[1] ? qValues[0] : qValues[1];
    %%%%%:  170-block  0
branch  0 never executed
branch  1 never executed
    #####:  171:    qValues[action] = (1-alpha)*qValues[action]+alpha*(feedback+gamma*uDash);
        -:  172:
        -:  173:    // Action update
    #####:  174:    if (qValues[0] == qValues[1] || randreal() > epsilon)
    %%%%%:  174-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  174-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  175:        action = randinteger(2);
    %%%%%:  175-block  0
call    0 never executed
        -:  176:    else
    #####:  177:        action = qValues[0] > qValues[1] ? 0 : 1;
    %%%%%:  177-block  0
    #####:  178:}
        -:  179:
        -:  180:// HCR Agent
function _ZN3IPD8HCRAgentC2Ev called 0 returned 0% blocks executed 0%
    #####:  181:HCRAgent::HCRAgent() = default;
    %%%%%:  181-block  0
call    0 never executed
function _ZN3IPD8HCRAgentD2Ev called 0 returned 0% blocks executed 0%
    #####:  182:HCRAgent::~HCRAgent() = default;
    $$$$$:  182-block  0
call    0 never executed
    %%%%%:  182-block  1
call    1 never executed
    %%%%%:  182-block  2
call    2 never executed
    $$$$$:  182-block  3
call    3 never executed
    %%%%%:  182-block  4
call    4 never executed
function _ZN3IPD8HCRAgentC2Eii called 0 returned 0% blocks executed 0%
    #####:  183:HCRAgent::HCRAgent(int memSize, int ia) : Agent(ia) {
    %%%%%:  183-block  0
call    0 never executed
    #####:  184:    for (int i = 0; i < memSize; i++)
    %%%%%:  184-block  0
branch  0 never executed
branch  1 never executed
    #####:  185:        memory.push(std::pair<int, float>(0, 0));
    %%%%%:  185-block  0
    $$$$$:  185-block  1
call    0 never executed
    #####:  186:}
    %%%%%:  186-block  0
function _ZN3IPD8HCRAgent6updateEf called 0 returned 0% blocks executed 0%
    #####:  187:void HCRAgent::update(float feedback) {
    %%%%%:  187-block  0
call    0 never executed
    #####:  188:    actionRewards[std::get<0>(memory.front())] -= std::get<1>(memory.front());
    #####:  189:    actionRewards[action] += feedback;
    %%%%%:  189-block  0
call    0 never executed
        -:  190:    memory.pop();
    #####:  191:    memory.push(std::pair<int, float>(action, feedback));
    #####:  192:    if (actionRewards[0] > actionRewards[1])
branch  0 never executed
branch  1 never executed
    #####:  193:        action = 0;
    %%%%%:  193-block  0
    #####:  194:    else if (actionRewards[1] > actionRewards[0])
    %%%%%:  194-block  0
branch  0 never executed
branch  1 never executed
    #####:  195:        action = 1;
    %%%%%:  195-block  0
        -:  196:    else
    #####:  197:        action = randinteger(2);
    %%%%%:  197-block  0
call    0 never executed
    #####:  198:}
        -:  199:
function _ZN3IPD8FPSAgentC2Ev called 0 returned 0% blocks executed 0%
    #####:  200:FPSAgent::FPSAgent() = default;
    %%%%%:  200-block  0
function _ZN3IPD8FPSAgentC2Ei called 0 returned 0% blocks executed 0%
    #####:  201:FPSAgent::FPSAgent(int ia) : Agent(ia) {}
function _ZN3IPD8FPSAgentD2Ev called 0 returned 0% blocks executed 0%
    #####:  202:FPSAgent::~FPSAgent() = default;
function _ZN3IPD8FPSAgent6updateEf called 0 returned 0% blocks executed 0%
    #####:  203:void FPSAgent::update(float feedback) {}
function _ZN3IPD8FPSAgent7displayEv called 0 returned 0% blocks executed 0%
    #####:  204:void FPSAgent::display() {
    #####:  205:    printf("Strategy: %d", action);
    %%%%%:  205-block  0
call    0 never executed
    #####:  206:}
        -:  207:
function _ZN3IPD15convergenceTimeEiiiiiiiiffffi called 20 returned 100% blocks executed 50%
       20:  208:std::vector<int> convergenceTime(int numHCR, int numQ, int numR, int numFPS,
        -:  209:                                 int numMR, int numMQ, int steps, int k,
        -:  210:                                 float alpha, float beta, float gamma,
        -:  211:                                 float epsilon, int memory) {
       20:  212:    int n = numHCR + numQ + numR + numFPS + numMR + numMQ;
       20:  213:    if (k == 0 || k > (n - 1) / 2)
       20:  213-block  0
branch  0 taken 20 (fallthrough)
branch  1 taken 0
       20:  213-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 20
    #####:  214:        k = (n - 1) / 2;
    %%%%%:  214-block  0
       20:  215:    std::vector<int> history(steps);
       20:  215-block  0
call    0 returned 20
       20:  216:    std::vector<Agent *> agents(n);
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  216-block  0
branch  3 never executed
branch  4 never executed
       20:  217:    std::vector<HCRAgent> hcrAgents(numHCR);
       20:  217-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  217-block  1
branch  3 never executed
branch  4 never executed
       20:  218:    std::vector<QAgent> qAgents(numQ);
       20:  218-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:  219:    std::vector<MQAgent> mqAgents(numMQ);
       20:  219-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  219-block  1
branch  3 never executed
branch  4 never executed
       20:  220:    std::vector<RAgent> rAgents(numR);
       20:  220-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  220-block  1
branch  3 never executed
branch  4 never executed
       20:  221:    std::vector<MRAgent> mrAgents(numMR);
       20:  221-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  221-block  1
branch  3 never executed
branch  4 never executed
       20:  222:    std::vector<FPSAgent> fpsAgents(numFPS);
       20:  222-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:  222-block  1
call    3 returned 20
branch  4 taken 20 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  222-block  2
branch  6 never executed
branch  7 never executed
        -:  223:    // Permute list
        -:  224:    std::vector<int> permutation;
       20:  225:    permutation.reserve(n);
       20:  225-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
      220:  226:    for (int i = 0; i < n; i++) {
       20:  226-block  0
      200:  226-block  1
      220:  226-block  2
branch  0 taken 200
branch  1 taken 20 (fallthrough)
      200:  227:        permutation.push_back(i);
      200:  227-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
        -:  228:    }
       20:  229:    std::random_device rd;
       20:  229-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
        -:  230:    std::mt19937 rng(rd());
       20:  231:    std::shuffle(permutation.begin(), permutation.end(), rng);
       20:  231-block  0
call    0 returned 20
        -:  232:    // All containing state are initialised assuming hostility
      20*:  233:    for (int i = 0; i < numQ; i++) {
       20:  233-block  0
branch  0 taken 0
branch  1 taken 20 (fallthrough)
    #####:  234:        qAgents[i] = QAgent(alpha, gamma, epsilon, randinteger(2), 2);
    %%%%%:  234-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  234-block  1
    %%%%%:  234-block  2
    #####:  235:        agents[permutation[i]] = &qAgents[i];
    %%%%%:  235-block  0
        -:  236:    }
      20*:  237:    for (int i = 0; i < numHCR; i++) {
       20:  237-block  0
branch  0 taken 0
branch  1 taken 20 (fallthrough)
        -:  238:        // Default 1 for IPD
    #####:  239:        hcrAgents[i] = HCRAgent(memory, randinteger(2));
    %%%%%:  239-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  239-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  239-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  239-block  3
branch  9 never executed
branch 10 never executed
    #####:  240:        agents[permutation[i + numQ]] = &hcrAgents[i];
        -:  241:    }
      20*:  242:    for (int i = 0; i < numR; i++) {
       20:  242-block  0
branch  0 taken 0
branch  1 taken 20 (fallthrough)
    #####:  243:        rAgents[i] = RAgent(alpha, beta, epsilon, randinteger(2), 2);
    %%%%%:  243-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  243-block  1
call    3 never executed
    #####:  244:        agents[permutation[i + numQ + numHCR]] = &rAgents[i];
        -:  245:    }
      20*:  246:    for (int i = 0; i < numFPS; i++) {
       20:  246-block  0
branch  0 taken 0
branch  1 taken 20 (fallthrough)
    #####:  247:        fpsAgents[i] = FPSAgent(randinteger(2));
    %%%%%:  247-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  247-block  1
    #####:  248:        agents[permutation[i + numQ + numHCR + numR]] = &fpsAgents[i];
    %%%%%:  248-block  0
        -:  249:    }
      220:  250:    for (int i = 0; i < numMR; i++) {
      200:  250-block  0
      220:  250-block  1
branch  0 taken 200
branch  1 taken 20 (fallthrough)
      200:  251:        mrAgents[i] = MRAgent(alpha, beta, epsilon, randinteger(2));
      200:  251-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  251-block  1
      200:  252:        agents[permutation[i + numQ + numHCR + numR + numFPS]] = &mrAgents[i];
      200:  252-block  0
        -:  253:    }
      20*:  254:    for (int i = 0; i < numMQ; i++) {
    %%%%%:  254-block  0
       20:  254-block  1
branch  0 taken 0
branch  1 taken 20 (fallthrough)
    #####:  255:        mqAgents[i] = MQAgent(alpha, gamma, epsilon, randinteger(2));
    %%%%%:  255-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  255-block  1
    #####:  256:        agents[permutation[i + numQ + numHCR + numR + numFPS + numMR]] = &mqAgents[i];
    %%%%%:  256-block  0
        -:  257:    }
        -:  258:    int s1, s2, converged;
        -:  259:#ifdef DEBUGQ
        -:  260:    int traceQ = randinteger(numQ);
        -:  261:#endif
        -:  262:#ifdef DEBUGR
        -:  263:    int traceR = randinteger(numR);
        -:  264:#endif
   200020:  265:    for (int step = 0; step < steps; step++) {
   200000:  265-block  0
   200020:  265-block  1
branch  0 taken 200000
branch  1 taken 20 (fallthrough)
        -:  266:#ifdef DEBUGQ
        -:  267:        qAgents[traceQ].display();
        -:  268:#endif
        -:  269:#ifdef DEBUGR
        -:  270:        rAgents[traceR].display();
        -:  271:#endif
  1078594:  272:        for (auto &match: randomlyPair(n, k)) {
   200000:  272-block  0
call    0 returned 200000
branch  1 taken 200000 (fallthrough)
branch  2 taken 0 (throw)
   200000:  272-block  1
  1078594:  272-block  2
branch  3 taken 878594
branch  4 taken 200000 (fallthrough)
   878594:  273:            Agent *p1 = agents[match.first];
   878594:  273-block  0
branch  0 taken 435123 (fallthrough)
branch  1 taken 443471
   878594:  274:            Agent *p2 = agents[match.second];
        -:  275:            s1 = p1->getAction();
        -:  276:            s2 = p2->getAction();
   878594:  277:            if (s1 == 0) {
   878594:  277-block  0
branch  0 taken 435123 (fallthrough)
branch  1 taken 443471
   435123:  278:                if (s2 == 0) {
   435123:  278-block  0
branch  0 taken 215927 (fallthrough)
branch  1 taken 219196
   215927:  279:                    p1->update(BETA);
   215927:  279-block  0
call    0 returned 215927
branch  1 taken 215927 (fallthrough)
branch  2 taken 0 (throw)
   215927:  280:                    p2->update(BETA);
   215927:  280-block  0
call    0 returned 215927
branch  1 taken 215927 (fallthrough)
branch  2 taken 0 (throw)
        -:  281:                } else {
   219196:  282:                    p1->update(DELTA);
   219196:  282-block  0
call    0 returned 219196
branch  1 taken 219196 (fallthrough)
branch  2 taken 0 (throw)
   219196:  283:                    p2->update(ALPHA);
   219196:  283-block  0
call    0 returned 219196
branch  1 taken 219196 (fallthrough)
branch  2 taken 0 (throw)
        -:  284:                }
        -:  285:            } else {
   443471:  286:                if (s2 == 0) {
   443471:  286-block  0
branch  0 taken 219674 (fallthrough)
branch  1 taken 223797
   219674:  287:                    p1->update(ALPHA);
   219674:  287-block  0
call    0 returned 219674
branch  1 taken 219674 (fallthrough)
branch  2 taken 0 (throw)
   219674:  288:                    p2->update(DELTA);
   219674:  288-block  0
call    0 returned 219674
branch  1 taken 219674 (fallthrough)
branch  2 taken 0 (throw)
        -:  289:                } else {
   223797:  290:                    p1->update(GAMMA);
   223797:  290-block  0
call    0 returned 223797
branch  1 taken 223797 (fallthrough)
branch  2 taken 0 (throw)
   223797:  291:                    p2->update(GAMMA);
   223797:  291-block  0
call    0 returned 223797
branch  1 taken 223797 (fallthrough)
branch  2 taken 0 (throw)
        -:  292:                }
        -:  293:            }
        -:  294:        }
        -:  295:        converged = 0;
  200000*:  296:        for (int i = 0; i < numQ; i++) {
   200000:  296-block  0
    %%%%%:  296-block  1
   200000:  296-block  2
branch  0 taken 0
branch  1 taken 200000 (fallthrough)
    #####:  297:            if (qAgents[i].getAction() == 0)
    %%%%%:  297-block  0
branch  0 never executed
branch  1 never executed
    #####:  298:                converged++;
    %%%%%:  298-block  0
        -:  299:        }
  200000*:  300:        for (int i = 0; i < numHCR; i++) {
    %%%%%:  300-block  0
   200000:  300-block  1
branch  0 taken 0
branch  1 taken 200000 (fallthrough)
    #####:  301:            if (hcrAgents[i].getAction() == 0)
    %%%%%:  301-block  0
branch  0 never executed
branch  1 never executed
    #####:  302:                converged++;
    %%%%%:  302-block  0
        -:  303:        }
  200000*:  304:        for (int i = 0; i < numR; i++) {
    %%%%%:  304-block  0
   200000:  304-block  1
branch  0 taken 0
branch  1 taken 200000 (fallthrough)
    #####:  305:            if (rAgents[i].getAction() == 0)
    %%%%%:  305-block  0
branch  0 never executed
branch  1 never executed
    #####:  306:                converged++;
    %%%%%:  306-block  0
        -:  307:        }
  200000*:  308:        for (int i = 0; i < numMQ; i++) {
    %%%%%:  308-block  0
   200000:  308-block  1
branch  0 taken 0
branch  1 taken 200000 (fallthrough)
    #####:  309:            if (mqAgents[i].getAction() == 0)
    %%%%%:  309-block  0
branch  0 never executed
branch  1 never executed
    #####:  310:                converged++;
    %%%%%:  310-block  0
        -:  311:        }
  2200000:  312:        for (int i = 0; i < numMR; i++) {
  2000000:  312-block  0
  2200000:  312-block  1
branch  0 taken 2000000
branch  1 taken 200000 (fallthrough)
  2000000:  313:            if (mrAgents[i].getAction() == 0)
  2000000:  313-block  0
branch  0 taken 990642 (fallthrough)
branch  1 taken 1009358
   990642:  314:                converged++;
   990642:  314-block  0
        -:  315:        }
   200000:  316:        history[step] = converged;
   200000:  316-block  0
        -:  317:    }
       20:  318:    return history;
       20:  318-block  0
       20:  319:}
       20:  319-block  0
call    0 returned 20
    $$$$$:  319-block  1
call    1 never executed
        -:  320:}
