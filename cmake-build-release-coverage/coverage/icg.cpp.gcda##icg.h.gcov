        -:    0:Source:C:/Users/IscG/Documents/Programming/epq/src/icg.h
        -:    0:Graph:C:\Users\IscG\Documents\Programming\epq\cmake-build-release-coverage\CMakeFiles\epq.dir\src\icg.cpp.gcno
        -:    0:Data:C:\Users\IscG\Documents\Programming\epq\cmake-build-release-coverage\CMakeFiles\epq.dir\src\icg.cpp.gcda
        -:    0:Runs:1
        -:    1:#ifndef ICG_H
        -:    2:#define ICG_H
        -:    3:#include "utility.h"
        -:    4:
        -:    5:namespace ICG {
    #####:    6:    class Agent {
    %%%%%:    6-block  0
        -:    7:    protected:
        -:    8:        int action{};
        -:    9:
        -:   10:    public:
        -:   11:        Agent();
        -:   12:        explicit Agent(int initialStrategy);
        -:   13:        ~Agent();
        -:   14:        int getAction() const;
        -:   15:        virtual void update(float feedback);
        -:   16:    };
        -:   17:
        -:   18:    class RAgent : public Agent {
        -:   19:    private:
        -:   20:        float rValues[4][2]{}, alpha{}, beta{}, epsilon{}, rho{0};
        -:   21:        int state{};
        -:   22:    public:
        -:   23:        RAgent();
        -:   24:        RAgent(float a, float b, float c, int ia, int is);
        -:   25:        ~RAgent();
        -:   26:        void update(float feedback) override;
        -:   27:    };
        -:   28:
        -:   29:    class MRAgent : public Agent {
        -:   30:    private:
        -:   31:        float rValues[2]{0, 0}, alpha{}, beta{}, epsilon{}, rho{0};
        -:   32:    public:
        -:   33:        MRAgent();
        -:   34:        MRAgent(float a, float b, float c, int ia);
        -:   35:        ~MRAgent();
        -:   36:        void update(float feedback) override;
        -:   37:    };
        -:   38:
    #####:   39:    class QAgent : public Agent {
    %%%%%:   39-block  0
    %%%%%:   39-block  1
    %%%%%:   39-block  2
branch  0 never executed
branch  1 never executed
    %%%%%:   39-block  3
    %%%%%:   39-block  4
branch  2 never executed
branch  3 never executed
    %%%%%:   39-block  5
        -:   40:    private:
        -:   41:        float qValues[4][2]{}, alpha{}, gamma{}, epsilon{};
        -:   42:        int state{};
        -:   43:    public:
        -:   44:        QAgent();
        -:   45:        QAgent(float a, float g, float e, int ia, int is);
        -:   46:        ~QAgent();
        -:   47:        void update(float feedback) override;
        -:   48:    };
        -:   49:
        -:   50:    class MQAgent : public Agent {
        -:   51:    private:
        -:   52:        float qValues[2]{0, 0}, alpha{}, gamma{}, epsilon{};
        -:   53:    public:
        -:   54:        MQAgent();
        -:   55:        MQAgent(float a, float g, float e, int ia);
        -:   56:        ~MQAgent();
        -:   57:        void update(float feedback) override;
        -:   58:    };
        -:   59:
        -:   60:    class HCRAgent : public Agent {
        -:   61:    private:
        -:   62:        std::queue<std::tuple<int, float>> memory;
        -:   63:        float actionRewards[2] {0, 0};
        -:   64:
        -:   65:    public:
        -:   66:        HCRAgent();
        -:   67:        explicit HCRAgent(int memSize, int ia);
        -:   68:        ~HCRAgent();
        -:   69:        void update(float feedback) override;
        -:   70:    };
        -:   71:
        -:   72:    class FPSAgent : public Agent {
        -:   73:    public:
        -:   74:        FPSAgent();
        -:   75:        explicit FPSAgent(int ia);
        -:   76:        ~FPSAgent();
        -:   77:        void update(float feedback) override;
        -:   78:    };
        -:   79:
        -:   80:    std::vector<int> convergenceTime(int numHCR, int numQ, int numR, int numFPS,
        -:   81:                                     int steps = 10000, int k = 0,
        -:   82:                                     float alpha = 0.7, float beta = 0.5, float gamma = 0.6,
        -:   83:                                     float epsilon = 0.01, int memory = 2);
        -:   84:}
        -:   85:#endif
